import PySimpleGUI as gui

class Sprite(gui.Image):

    IMAGE_DATA = {'B1': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADpJREFUOE9jZGD4/5+BioBx1ECSQ5SRETUCMMKQ1CgaNZBhNAxBaQo1Yf0nkI4IJpsRaSBlheMILA8Ba2VD7aDKQiIAAAAASUVORK5CYII=', 'B2': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADxJREFUOE9jZGD4/5+BioBx1ECSQ5SRETUCMMKQ1CgaNZBhNAwxMyIjWrr4j5auSE42I8BASovGEVgeAgCURkvtmRiJXAAAAABJRU5ErkJggg==', 'B3': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADxJREFUOE9jZGD4/5+BioBx1ECSQ5SRETUCMMKQ1CgaNZBhNAwJZ0RG9HTCgFoUkByGw9BASovGEVgeAgBrZUPtysK03wAAAABJRU5ErkJggg==', 'B4': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD1JREFUOE9jZGD4/5+BioBx1ECSQ5SRETUCMMKQ1CgaBgYyMKAGyn8CYUDQyyPQwBGYbKjuZUqLxhFYHgIAe7BD7QknGR0AAAAASUVORK5CYII=', 'B5': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD9JREFUOE9jZGD4/5+BioBx1ECSQ5SRETUCMMKQ1CgahgYyovnpP1qYkOzlEWggoWxOchiOAAMJeZGQ/AgsDwHFJ0vtysbDhgAAAABJRU5ErkJggg==', 'B6': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD5JREFUOE9jZGD4/5+BioBx1ECSQ5SRETUCMMKQ1CgaAQYyovuRATUZkxyGI9BA9Gw/ApINyV6mtGgcgeUhAHuwQ+2zVqhOAAAAAElFTkSuQmCC', 'C1': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADhJREFUOE9jZPj//z8DFQHjqIEUh+ZoGDIwkJooGdFCHSMMR6CBDGiBQiinEwzDkWgghbl5BOZlAJ5iR9lE3z9nAAAAAElFTkSuQmCC', 'C2': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADlJREFUOE9jZPj//z8DFQHjqIEUh+ZoGDIwkJooGdFCHSMMRw1kYEQLJPScT3IYjgADKc3MIzAvAwAU2kvZ0vqsxwAAAABJRU5ErkJggg==', 'C3': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADpJREFUOE9jZPj//z8DFQHjqIEUh+ZoGDIwkJooGdFCHSMMRw3ESJeM6IGGFkYkh+EwNJDSzDwC8zIAXmJH2SyTkiAAAAAASUVORK5CYII=', 'C4': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADlJREFUOE9jZPj//z8DFQHjqIEUh+ZoGDIwMDCiBiOhVIqmnAEzDEeegaRmbIJhOAINpDQzj8C8DACurUfZrI29tgAAAABJRU5ErkJggg==', 'C5': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD9JREFUOE9jZPj//z8DFQHjqIEUh+ZoGDIwoCdKRkbUYEVPtWjSDBhhOGogwXRJchgSMnEYGEjIi4TkR2BeBgA1cEvZcqFQ4gAAAABJRU5ErkJggg==', 'C6': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD5JREFUOE9jZPj//z8DFQHjqIEUh+ZoGDIwEEqUjIxowYymASMMRw0kmC7Rg5TkMES3YRgYSDDQCCgYgXkZAG6tR9mF/y2KAAAAAElFTkSuQmCC', 'C7': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAACxJREFUOE9jZPj//z8DFQHjqIEUh+ZoGFIchAyjYTgahmSEwGiyISPQ0LQAAC++O9ksQvpkAAAAAElFTkSuQmCC', 'C8': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADhJREFUOE9jZPj//z8DFQHjqIEUh+ZoGFIchAyjYcjAgJ6xGRlRwxU956NJY4bhCDSQ0pQ4AtMhAA7XR9k6SOwGAAAAAElFTkSuQmCC', 'E0': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAACtJREFUOE9jZGBg+M9ARcA4aiDFoTkahhQHIcNoGI6GIRkhMJpsyAg0NC0ALIIUAaxCfxoAAAAASUVORK5CYII=', 'E1': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADlJREFUOE9jZGBg+M9ARcA4aiDFoTkahphB+P8/ajJlZASFEm5AMAxHoIGkJkyCYThqIMEQGIFhCABz/CAB6DCuMQAAAABJRU5ErkJggg==', 'E2': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEZJREFUOE9jZGBg+M9ARcA4aiBGaP7/jxrEjIygUMINCIbhCDAQ3YuEkih6mGKE4Qg0ED3MRkCyobmXCaVDdHmCeXn4GQgAwX84AXTD0iYAAAAASUVORK5CYII=', 'M1': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD1JREFUOE9j/L/9/38GKgLGUQMpDs3RMGRgYPAgMRh3oKrHDMORZyCjJ2qYEMzphMJwBBpIYirEUD4C8zIA895aJXzD1tUAAAAASUVORK5CYII=', 'M2': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADxJREFUOE9j/L/9/38GKgLGUQMpDs3RMGRgYPAgMRh3oKrHDMNRAxkZUcMII+eTGoYjwUASkyG68hGYlwFz3lolbj1VUAAAAABJRU5ErkJggg==', 'M3': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD9JREFUOE9j/L/9/38GKgLGUQMpDs3RMGRgYPAgMRh3oKrHDMNRA9FDlJERVeT/dgrDcDgaSGIyxAjjkVceAgDBZlYllrRHqAAAAABJRU5ErkJggg==', 'M4': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD1JREFUOE9j/L/9/38GKgLGUQMpDs3RMGRgYPREDUaCqXQHqnqMMByBBjJ4kJgUCYXhSDSQxCBEVz4C8zIAFINaJTWy37MAAAAASUVORK5CYII=', 'M5': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD5JREFUOE9j/L/9/38GKgLGUQMpDs3RMGRgYPBADUZGRlQ+RqrdgaYeIx2OGkgwYZIahiPBQIJ+xK9gBOZlAJR0WiU47E12AAAAAElFTkSuQmCC', 'M6': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEFJREFUOE9j/L/9/38GKgLGUQMpDs3RMGRgYPDAH4yMjKjy/7ej8jHDcNRAgglzB4VhiGHBMDCQYKARSKcjrzwEANGxViXR7abTAAAAAElFTkSuQmCC', 'M7': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAACxJREFUOE9j/L/9/38GKgLGUQMpDs3RMKQ4CBlGw3A0DMkIgdFkQ0agoWkBAKlRSiV2LRo7AAAAAElFTkSuQmCC', 'M8': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADtJREFUOE9j/L/9/38GKgLGUQMpDs3RMKQ4CBlGw5CBgcEDNRwZGVH5GDl/B5p6jLw8Ag2kMCmOwHQIAPsbViVZ/7/9AAAAAElFTkSuQmCC', 'O1': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEBJREFUOE9j/L898D8DFQHjqIEUh+ZoGDIwMHisIy0cdwShqMcMw5FnIKMnahj+J5TTCYXhCDSQtESIqXoE5mUAYsJUjZ6902YAAAAASUVORK5CYII=', 'O2': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEBJREFUOE9j/L898D8DFQHjqIEUh+ZoGDIwMHisIy0cdwShqMcMw1EDGRlRg/Q/es4nNQxHgoGkpUIM1SMwLwMA4rNUjRsQ14QAAAAASUVORK5CYII=', 'O3': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEBJREFUOE9j/L898D8DFQHjqIEUh+ZoGDIwMHisIy0cdwShqMcMw1ED0QOUkRFV5P92CsNwOBpIWirEUD0C8zIAMEpQjUVhXjUAAAAASUVORK5CYII=', 'O4': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAENJREFUOE9j/L898D8DFQHjqIEUh+ZoGDIwMHquQwnH/4RS6Y4gFPUYYTgCDWTwQA1DggmTUBiORAMJBhp+BSMwLwMAg1hUjTJPvhEAAAAASUVORK5CYII=', 'O5': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEJJREFUOE9j/L898D8DFQHjqIEUh+ZoGDIwMHisQwlHRkbUYP2Pnmp3BKGqx0iHowYSTJikhuFIMJCgH/ErGIF5GQADWFSNrLZfIQAAAABJRU5ErkJggg==', 'O6': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEJJREFUOE9j/L898D8DFQHjqIEUh+ZoGDIwMHiswxuOjIyo0v+3B6EIYIbhqIEEE+YOCsMQw4JhYCDBQMOvYATmZQBAlVCN+oGR8wAAAABJRU5ErkJggg==', 'O7': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAACxJREFUOE9j/L898D8DFQHjqIEUh+ZoGFIchAyjYTgahmSEwGiyISPQ0LQAAKX6PI0cl8Z2AAAAAElFTkSuQmCC', 'O8': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD9JREFUOE9j/L898D8DFQHjqIEUh+ZoGFIchAyjYcjAwOCxDiUgGRlRw/U/es7fEYSqHiMvj0ADKUyKIzAdAgCovEyNr+Ye3AAAAABJRU5ErkJggg==', 'P1': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADRJREFUOE9j/P+f4T8DFQHjqIEUh+ZoGFIchAyjYYgZhoyMqGL/CeR8gmE4aiDDaBhipDMACcJL2UXkK5UAAAAASUVORK5CYII=', 'P2': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD1JREFUOE9j/P+f4T8DFQHjqIEUh+ZoGGIGISMjqth/AqmWYBiOAAPRvUgoYaKHKUYYjgADGRioXB6OPAMBic1D4UOuYywAAAAASUVORK5CYII=', 'P3': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADJJREFUOE9j/P+f4T8DFQHjqIEUh+ZoGBIOQkZG/GpIDsMRaCChUCY5DEcNxAiBERiGAHCeO+FAOex+AAAAAElFTkSuQmCC', 'P4': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD1JREFUOE9jZGBg+M+ABP6j8JBliGMzjhqIEVCkhilGGKKbOAINJDUICIbhCDRwBCYbir1MqgHoyWoElocA28s72aUaHPwAAAAASUVORK5CYII=', 'P5': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAACxJREFUOE9j/P+f4T8DFQHjqIEUh+ZoGFIchAyjYTgahmSEwGiyISPQ0LQAAFeWO9mzjRNOAAAAAElFTkSuQmCC', 'P6': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD1JREFUOE9j/P+f4T8DBYCREVUz46iBBEMTPczQNZAchiPAQEJeJDkMR6CBGGGElndJDsNRAzHy+mh5yAAA1D48AZRvYWQAAAAASUVORK5CYII=', 'P7': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADFJREFUOE9j/P+f4T8DFQHjqIEUh+ZIDEMGBvzp8D+JqZRxBBo4mvVGsx7pIUD10gYAWIc72TKH3+0AAAAASUVORK5CYII=', 'P8': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEZJREFUOE/t0jEOADAIAkD4/6Mx7VYcjEk3dUaGUwIQPg4HFkqvIQ9CY2QX4BYmPTd1M19IhilgRxpQ2HjJGy0Nt7AUGGgYcSFD4Ue+jXYAAAAASUVORK5CYII=', 'P9': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADxJREFUOE9j/P+f4T8DHsDIiCr5H69qBgbGUQMxQnM0DBkoTjb40ig2OYLpcNRAgiEwGoYEg4igghEYhgDNRkvZPtU2LAAAAABJRU5ErkJggg==', 'R1': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADtJREFUOE9j/M/A8J+BioBx1ECKQ3M0DBkYGP6TmCwZGVHCHTMMR56BjGhZm2AIEArDEWggpZl5BOZlAKJhO+253DVbAAAAAElFTkSuQmCC', 'R2': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADlJREFUOE9j/M/A8J+BioBx1ECKQ3M0DBkYGP6TmCwZGVHCHTMMRw1ECyLMICY1DEeCgRTm5hGYlwEU2T/tghRxHAAAAABJRU5ErkJggg==', 'R3': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADxJREFUOE/t07ERACAMQtHP/kNjbaxyWGkYgOIdyGAuRlMYa44h4OYspc39NJzCOsxChgkNXywM3/zhlxdiYTvtyu8KdgAAAABJRU5ErkJggg==', 'R4': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD1JREFUOE/tkyESADAMwsL/H93pdQLROcoDInJBBcXHaYFjm+sQ1LIsV6l0eX8cBgKx0lqqzmEicPjmwC8fsqw77b1mm44AAAAASUVORK5CYII=', 'R5': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD9JREFUOE9j/M/A8J+BioBx1ECKQ3M0DBkYGP6jJktGRtRgRZNmYEBTgBmGowYSTJikhuFIMJCgH/ErGIF5GQA1bz/tXF1wIgAAAABJRU5ErkJggg==', 'R6': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEJJREFUOE9j/M/A8J+BioBx1ECKQ3M0DBkYGP7jT5aMjKjB/J8BVQAzDEcNJJgw0QKV5DDEsGAYGEgw0PArGIF5GQByrDvtWbVk+wAAAABJRU5ErkJggg==', 'R7': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAACtJREFUOE9j/M/A8J+BioBx1ECKQ3M0DCkOQobRMBwNQzJCYDTZkBFoaFoATAIn7T0bR54AAAAASUVORK5CYII=', 'R8': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADpJREFUOE/t0yESAEAIQtHP/Q/tZt2ITaw6hDeogmJxlEBbM4Y2ITEEqr+21F3HGsbBb3gw0KziwR4+FNM37Zfoy8wAAAAASUVORK5CYII=', 'W1': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD1JREFUOE9j/P///38GKgLGUQMZGBgZSQtRtCjADMNRAwkG6GgYYiQbRrRkQzCjEwrDEWggwXRHQMEILA8Bjr1rxVN96iwAAAAASUVORK5CYII=', 'W2': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD1JREFUOE9j/P///38GKgLGUQMZGBgZSQtRtCjADMNRAwkG6GgYEkw26KkSI+OTGoYjwUCCCQ+/ghFYHgIATr1rxW8rWN0AAAAASUVORK5CYII=', 'W3': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADlJREFUOE9j/P///38GKgLGUQMZGBgZSQtRtCjADMNRAwkG6GgYkpxs0FMpelEwaiDBVEdQwQgsDwEOvWvF6CloggAAAABJRU5ErkJggg==', 'W4': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD5JREFUOE9j/P///38GKgLGUQMZGBgZSQtRtCjADMORZyAjmpcJJlJCYTgCDRxNh4SzIaFkQ9gE/CpGYHkIAJ8Ia8USNA1DAAAAAElFTkSuQmCC', 'W5': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAD1JREFUOE9j/P///38GKgLGUQMZGBgZSQtRtCjADMNRA9FDFCPRkhqGI9BAgomS1DAcCQYS9CN+BSOwPAQAXwhrxVqZj80AAAAASUVORK5CYII=', 'W6': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADxJREFUOE9j/P///38GKgLGUQMZGBgZSQtRtCjADMNRA9EDFD2E0ZMxyWE4Ag3ESKSj6XC0+CKt5MKmGgAfCGvFRe4v2QAAAABJRU5ErkJggg==', 'X1': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADBJREFUOE9jZGBg+M9ARcA4aiDFoTkahtiCkLRkSkQYjhpIIKWOhuFoOgSHAGk5BQAg0R/1xetI+AAAAABJRU5ErkJggg==', 'X2': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADlJREFUOE9jZGBg+M9ARcA4aiDFoTkyw/A/iekQFEq4ASMDw6iBBFPiaBiiBdFosiGYZhgYGPAnGwC1qiABuUv5SAAAAABJRU5ErkJggg==', 'X3': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAC1JREFUOE9jZGBg+M9ARcA4aiDFoTkyw/A/tdPhqIEUpkRGBobRMBwNQ1JDAACfYB/1gXupKAAAAABJRU5ErkJggg==', 'X4': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADZJREFUOE9jZGBg+M+AFxCQRtPLOGogltAcDUP8aYxhNNlgCyCqJxsCsUB6Xh41kPKEPdzCEABkMx/1obNHvwAAAABJRU5ErkJggg==', 'X5': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADBJREFUOE9jZGBg+M+AFxCQRtPLOGogltAcDUP8aYxhNNlgC6DRZDOabNBDYPDnFACmfSftdLytLgAAAABJRU5ErkJggg==', 'X7': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADpJREFUOE/t0jEOAEAIAsHl/4/W3lzE67FFKSYKKNYx8bhVCh+aMdx/DEH9IaVwCsTQ/MQhjuEByaw0JRsn7Vp1ttQAAAAASUVORK5CYII=', 'X8': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADpJREFUOE9jZGD4/5+BJMCIVzXjqIFEhOZoGKIF0miyISLVMBBMNgwk5mX8loKsGzWQmIjBrWYEhiEAF3sgAZ60FmkAAAAASUVORK5CYII=', 'XA': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAC1JREFUOE9jZGD4/5+BJMCIVzXjqIFEhOZoGKIF0miyISLVMIwmm9FkM/hzCgBioCgBnS63+AAAAABJRU5ErkJggg==', 'XB': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADNJREFUOE9jZGD4/5+BJMCIVzXjqIFEhOZoGKIFEhnJBn8wjxpIRDIkoGQ0DEfDkIwQAABMVif1PpBlHQAAAABJRU5ErkJggg==', 'XC': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAC9JREFUOE9jZGD4/5+BioBx1ECKQ3M0DCkOQoaRGYYM1M7LowZSmBQZGRhGWhgCAOLCH/WnHwvJAAAAAElFTkSuQmCC', 'XD': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAADNJREFUOE9jZGD4/5+BioBx1ECKQ3M0DCkOQoaRGYYMBPIyaVmdkYFh1ECMpDgahgRyJwAlGyftRn4wWwAAAABJRU5ErkJggg==', 'XE': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAC9JREFUOE9jZGD4/5+BioBx1ECKQ3M0DCkOQobRMCQmDBnxKiIjDEcNRAvRERiGAC32J/Wxw/H1AAAAAElFTkSuQmCC', 'XF': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAACtJREFUOE9jZGD4/5+BioBx1ECKQ3M0DCkOQobRMBwNQzJCYDTZkBFoaFoAJCon7eFQZVYAAAAASUVORK5CYII=', 'XG': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEBJREFUOE9jZGBg+M9ARcA4aiDFoTkiw/D/f9R0yAgKBSSAJs1AQJ6RYQQaiJ6XSQwz9DDFTIcjwMARmGyo7GUAE/dT8W13AxkAAAAASUVORK5CYII=', 'XH': b'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAEBJREFUOE9jZGBg+M9ARcA4aiDFoTkahqBEhJYsGUGhggQIyGOG4Qgw8D+aH0kMM/QwZ2QYgQail4cjINlQ2csAwWdL+QHnDxIAAAAASUVORK5CYII='}
    
    def __init__(
        self,
        row:int,
        col:int,
        foundation_source:str,
        occupant_source:str= None):

        self.coords = (row, col)
        self.row, self.col = self.coords

        self.ID = f'{row}:{col}'

        self.foundation = foundation_source # base sprite source
        if occupant_source:
            self.occupant = occupant_source # current sprite source, shown on top of foundation if ! == None
        else:
            self.occupant = foundation_source # copy foundation_source if occupant_source is None
        self.show_occupant = True
        
        super().__init__(
            source= self.data(),
            pad= ((0,1),(0,1)),
            key= self.ID,
##            subsample= 5,
            )

    def set_foundation(self, source):
        self.foundation = source
        self.refresh()

    def set_occupant(self, source):
        self.occupant = source
        self.refresh()

    def source(self):
        if self.occupant and self.show_occupant:
            return self.occupant
        else:
            return self.foundation

    def data(self):
        return Sprite.IMAGE_DATA[self.source()]
        

    def refresh(self):
        self.update(source= self.data())


    def bind_clicks(self):
        self.bind('<1>', '-CLICK-')
        self.bind('<3>', '-CLICK-ALT-')

    def toggle(self, alt:bool= False):
        keys = list(Sprite.IMAGE_DATA.keys())
        ix = keys.index(self.source())
        if alt:
            ix -= 1
        else:
            ix += 1
        try:
            self.set_occupant(keys[ix])
        except IndexError:
            self.set_occupant(keys[0])
        

    def __str__(self):
        return f'("{self.foundation}","{self.occupant}")'.replace('"None"', 'None')
    def __repr__(self):
        return str(self)



class Grid(gui.Column):

    LEVEL_1 = [[("XE",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XD",None),("XE",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XD",None),],[("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),],[("XA",None),("E1",None),("X1",None),("X3",None),("X3",None),("X2",None),("E1",None),("X1",None),("X3",None),("X3",None),("X3",None),("X2",None),("E1",None),("X5",None),("XA",None),("E1",None),("X1",None),("X3",None),("X3",None),("X3",None),("X2",None),("E1",None),("X1",None),("X3",None),("X3",None),("X2",None),("E1",None),("X5",None),],[("XA",None),("E2",None),("X5",None),("XF",None),("XF",None),("XA",None),("E1",None),("X5",None),("XF",None),("XF",None),("XF",None),("XA",None),("E1",None),("X5",None),("XA",None),("E1",None),("X5",None),("XF",None),("XF",None),("XF",None),("XA",None),("E1",None),("X5",None),("XF",None),("XF",None),("XA",None),("E2",None),("X5",None),],[("XA",None),("E1",None),("X4",None),("XC",None),("XC",None),("X8",None),("E1",None),("X4",None),("XC",None),("XC",None),("XC",None),("X8",None),("E1",None),("X4",None),("X8",None),("E1",None),("X4",None),("XC",None),("XC",None),("XC",None),("X8",None),("E1",None),("X4",None),("XC",None),("XC",None),("X8",None),("E1",None),("X5",None),],[("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),],[("XA",None),("E1",None),("X1",None),("X3",None),("X3",None),("X2",None),("E1",None),("X1",None),("X2",None),("E1",None),("X1",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X2",None),("E1",None),("X1",None),("X2",None),("E1",None),("X1",None),("X3",None),("X3",None),("X2",None),("E1",None),("X5",None),],[("XA",None),("E1",None),("X4",None),("XC",None),("XC",None),("X8",None),("E1",None),("X5",None),("XA",None),("E1",None),("X4",None),("XC",None),("XC",None),("XD",None),("XE",None),("XC",None),("XC",None),("X8",None),("E1",None),("X5",None),("XA",None),("E1",None),("X4",None),("XC",None),("XC",None),("X8",None),("E1",None),("X5",None),],[("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),],[("XB",None),("X3",None),("X3",None),("X3",None),("X3",None),("X2",None),("E1",None),("X5",None),("XB",None),("X3",None),("X3",None),("X2",None),("E0",None),("X5",None),("XA",None),("E0",None),("X1",None),("X3",None),("X3",None),("X7",None),("XA",None),("E1",None),("X1",None),("X3",None),("X3",None),("X3",None),("X3",None),("X7",None),],[("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),("XA",None),("E1",None),("X5",None),("XE",None),("XC",None),("XC",None),("X8",None),("E0",None),("X4",None),("X8",None),("E0",None),("X4",None),("XC",None),("XC",None),("XD",None),("XA",None),("E1",None),("X5",None),("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),],[("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),("XA",None),("E1",None),("X5",None),("XA",None),("E0",None),("E0",None),("E0",None),("E0","E0"),("E0","R3"),("E0","E0"),("E0",None),("E0",None),("E0",None),("E0",None),("X5",None),("XA",None),("E1",None),("X5",None),("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),],[("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),("XA",None),("E1",None),("X5",None),("XA",None),("E0",None),("X1",None),("X3",None),("X3",None),("XG",None),("XH",None),("X3",None),("X3",None),("X2",None),("E0",None),("X5",None),("XA",None),("E1",None),("X5",None),("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),],[("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("X8",None),("E1",None),("X4",None),("X8",None),("E0",None),("X5",None),("E0",None),("E0",None),("E0","E0"),("E0","E0"),("E0","E0"),("E0","E0"),("XA",None),("E0",None),("X4",None),("X8",None),("E1",None),("X4",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),],[("E0",None),("E0",None),("E0",None),("E0",None),("E0",None),("E0",None),("E1",None),("E0",None),("E0",None),("E0",None),("X5",None),("E0","E0"),("E0","E0"),("E0","E0"),("E0","O1"),("E0","E0"),("E0","E0"),("XA",None),("E0",None),("E0",None),("E0",None),("E1",None),("E0",None),("E0",None),("E0",None),("E0",None),("E0",None),("E0",None),],[("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X2",None),("E1",None),("X1",None),("X2",None),("E0",None),("X5",None),("E0","C8"),("E0",None),("E0",None),("E0",None),("E0","E0"),("E0","M5"),("XA",None),("E0",None),("X1",None),("X2",None),("E1",None),("X1",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),],[("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),("XA",None),("E1",None),("X5",None),("XA",None),("E0",None),("X4",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("X8",None),("E0",None),("X5",None),("XA",None),("E1",None),("X5",None),("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),],[("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),("XA",None),("E1",None),("X5",None),("XA",None),("E0",None),("E0",None),("E0",None),("E0",None),("E0","E0"),("E0",None),("E0",None),("E0",None),("E0",None),("E0",None),("X5",None),("XA",None),("E1",None),("X5",None),("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),],[("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),("XA",None),("E1",None),("X5",None),("XA",None),("E0",None),("X1",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X2",None),("E0",None),("X5",None),("XA",None),("E1",None),("X5",None),("XF",None),("XF",None),("XF",None),("XF",None),("XF",None),],[("XE",None),("XC",None),("XC",None),("XC",None),("XC",None),("X8",None),("E1",None),("X4",None),("X8",None),("E0",None),("X4",None),("XC",None),("XC",None),("XD",None),("XE",None),("XC",None),("XC",None),("X8",None),("E0",None),("X4",None),("X8",None),("E1",None),("X4",None),("XC",None),("XC",None),("XC",None),("XC",None),("XD",None),],[("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),],[("XA",None),("E1",None),("X1",None),("X3",None),("X3",None),("X2",None),("E1",None),("X1",None),("X3",None),("X3",None),("X3",None),("X2",None),("E1",None),("X5",None),("XA",None),("E1",None),("X1",None),("X3",None),("X3",None),("X3",None),("X2",None),("E1",None),("X1",None),("X3",None),("X3",None),("X2",None),("E1",None),("X5",None),],[("XA",None),("E1",None),("X4",None),("XC",None),("XD",None),("XA",None),("E1",None),("X4",None),("XC",None),("XC",None),("XC",None),("X8",None),("E1",None),("X4",None),("X8",None),("E1",None),("X4",None),("XC",None),("XC",None),("XC",None),("X8",None),("E1",None),("X5",None),("XE",None),("XC",None),("X8",None),("E1",None),("X5",None),],[("XA",None),("E2",None),("E1",None),("E1",None),("X5",None),("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E0","P5"),("E0",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),("XA",None),("E1",None),("E1",None),("E2",None),("X5",None),],[("XB",None),("X3",None),("X2",None),("E1",None),("X5",None),("XA",None),("E1",None),("X1",None),("X2",None),("E1",None),("X1",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X2",None),("E1",None),("X1",None),("X2",None),("E1",None),("X5",None),("XA",None),("E1",None),("X1",None),("X3",None),("X7",None),],[("XE",None),("XC",None),("X8",None),("E1",None),("X4",None),("X8",None),("E1",None),("X5",None),("XA",None),("E1",None),("X4",None),("XC",None),("XC",None),("XD",None),("XE",None),("XC",None),("XC",None),("X8",None),("E1",None),("X5",None),("XA",None),("E1",None),("X4",None),("X8",None),("E1",None),("X4",None),("XC",None),("XD",None),],[("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),],[("XA",None),("E1",None),("X1",None),("X3",None),("X3",None),("X3",None),("X3",None),("X7",None),("XB",None),("X3",None),("X3",None),("X2",None),("E1",None),("X5",None),("XA",None),("E1",None),("X1",None),("X3",None),("X3",None),("X7",None),("XB",None),("X3",None),("X3",None),("X3",None),("X3",None),("X2",None),("E1",None),("X5",None),],[("XA",None),("E1",None),("X4",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("X8",None),("E1",None),("X4",None),("X8",None),("E1",None),("X4",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("XC",None),("X8",None),("E1",None),("X5",None),],[("XA",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("E1",None),("X5",None),],[("XB",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X3",None),("X7",None),],]


    
    def __init__(self, dimensions= (28,31), source_matrix:list= None):
        if source_matrix:
            dimensions = (len(source_matrix[0]), len(source_matrix))
        self.num_cols, self.num_rows = self.width, self.height = self.dimensions = dimensions

        self.layout = []
        self.all_sprites = []

        for r in range(self.num_rows):
            row = []
            for c in range(self.num_cols):
                foundation_source, occupant_source = ('E0', None)
                if source_matrix:
                    foundation_source, occupant_source = source_matrix[r][c]
                sp = Sprite(r, c, foundation_source, occupant_source)
                row.append(sp)
                self.all_sprites.append(sp)
            self.layout.append(row)
                
        super().__init__(self.layout)

    def toggle_occupant_visiblility(self):
        for sp in self.all_sprites:
            sp.show_occupant != sp.show_occupant
            sp.refresh()
            

    def __str__(self):
        output = '['
        for row in self.layout:
            output += '['
            for col in row:
                output +=f'{col},'
            output += '],'
        output += ']'
        return output
    def __repr__(self):
        return str(self)
    
    
    def pretty(self):
        output = ""
        for row_ix, row in enumerate(self.layout):
            lines = "+" + "--+"*len(row)
            if row_ix == 0: output += lines + "\n"
            ups = "|"
            lows = "|"
            for col in row:
                upper, lower = col.occupant, col.foundation
                ups += upper + "|"
                lows += lower + "|"
            output += ups + "\n"
            output += lows + "\n"
            output += lines + "\n"
        return output
                

                
class PicoPersonApp(gui.Window):
    def __init__(self):

        gui.theme('black')

        self.grid = Grid(dimensions= None, source_matrix= Grid.LEVEL_1)

##        demo = gui.Image(source= b'')

        print(self.grid.pretty())
    

        title= ''

        super().__init__(title,
                         layout= [[self.grid]],
                         return_keyboard_events= True,
                         no_titlebar= True,
                         grab_anywhere= True,)

        self.finalize()

        for sp in self.grid.all_sprites:
            sp.bind_clicks()

        self.bind('<Control-p>', '-PRINT-')
        self.bind('<Control-P>', '-PRINT-')
        
        self.event_loop()

    def event_loop(self):
        while True:
            event, values = self.read() 
            print(event, values)       
            if event in (gui.WIN_CLOSED, 'Exit', 'Escape:27', 'F5:116'):
                print(self.grid)
                break

            if event == '`':
                self.grid.toggle_occupant_visiblility()

            if '-CLICK-' in event:
                clicked_sprite = self[event.split('-')[0]]
                alt = 'ALT' in event
                clicked_sprite.toggle(alt)

            if event == '-PRINT-':
                print(self.grid)

        self.close()

def main():
    ppa = PicoPersonApp()

if __name__ == '__main__':
    main()
